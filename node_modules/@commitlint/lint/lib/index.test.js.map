{"version":3,"sources":["../src/index.test.js"],"names":["t","throws","error","is","message","actual","true","valid","false","input","defaultIgnores","ignoredMessage","ignores","c","parserOpts","headerPattern","foo","bar","indexOf","length","notThrows","report","issuePrefixes","plugins","rules","expected","commentChar"],"mappings":"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","file":"index.test.js","sourcesContent":["import test from 'ava';\nimport lint from '.';\n\ntest('throws without params', async t => {\n\tconst error = await t.throws(lint());\n\tt.is(error.message, 'Expected a raw commit');\n});\n\ntest('throws with empty message', async t => {\n\tconst error = await t.throws(lint(''));\n\tt.is(error.message, 'Expected a raw commit');\n});\n\ntest('positive on stub message and no rule', async t => {\n\tconst actual = await lint('foo: bar');\n\tt.true(actual.valid);\n});\n\ntest('positive on stub message and adhered rule', async t => {\n\tconst actual = await lint('foo: bar', {\n\t\t'type-enum': [2, 'always', ['foo']]\n\t});\n\tt.true(actual.valid);\n});\n\ntest('negative on stub message and broken rule', async t => {\n\tconst actual = await lint('foo: bar', {\n\t\t'type-enum': [2, 'never', ['foo']]\n\t});\n\tt.false(actual.valid);\n});\n\ntest('positive on ignored message and broken rule', async t => {\n\tconst actual = await lint('Revert \"some bogus commit\"', {\n\t\t'type-empty': [2, 'never']\n\t});\n\tt.true(actual.valid);\n\tt.is(actual.input, 'Revert \"some bogus commit\"');\n});\n\ntest('negative on ignored message, disabled ignored messages and broken rule', async t => {\n\tconst actual = await lint(\n\t\t'Revert \"some bogus commit\"',\n\t\t{\n\t\t\t'type-empty': [2, 'never']\n\t\t},\n\t\t{\n\t\t\tdefaultIgnores: false\n\t\t}\n\t);\n\tt.false(actual.valid);\n});\n\ntest('positive on custom ignored message and broken rule', async t => {\n\tconst ignoredMessage = 'some ignored custom message';\n\tconst actual = await lint(\n\t\tignoredMessage,\n\t\t{\n\t\t\t'type-empty': [2, 'never']\n\t\t},\n\t\t{\n\t\t\tignores: [c => c === ignoredMessage]\n\t\t}\n\t);\n\tt.true(actual.valid);\n\tt.is(actual.input, ignoredMessage);\n});\n\ntest('positive on stub message and opts', async t => {\n\tconst actual = await lint(\n\t\t'foo-bar',\n\t\t{\n\t\t\t'type-enum': [2, 'always', ['foo']],\n\t\t\t'type-empty': [2, 'never']\n\t\t},\n\t\t{\n\t\t\tparserOpts: {\n\t\t\t\theaderPattern: /^(\\w*)(?:\\((.*)\\))?-(.*)$/\n\t\t\t}\n\t\t}\n\t);\n\tt.true(actual.valid);\n});\n\ntest('throws for invalid rule names', async t => {\n\tconst error = await t.throws(\n\t\tlint('foo', {foo: [2, 'always'], bar: [1, 'never']})\n\t);\n\n\tt.is(error.message.indexOf('Found invalid rule names: foo, bar'), 0);\n});\n\ntest('throws for invalid rule config', async t => {\n\tconst error = await t.throws(\n\t\tlint('type(scope): foo', {\n\t\t\t'type-enum': 1,\n\t\t\t'scope-enum': {0: 2, 1: 'never', 2: ['foo'], length: 3}\n\t\t})\n\t);\n\n\tt.true(error.message.indexOf('type-enum must be array') > -1);\n\tt.true(error.message.indexOf('scope-enum must be array') > -1);\n});\n\ntest('allows disable shorthand', async t => {\n\tawait t.notThrows(lint('foo', {'type-enum': [0], 'scope-enum': [0]}));\n});\n\ntest('throws for rule with invalid length', async t => {\n\tconst error = await t.throws(\n\t\tlint('type(scope): foo', {'scope-enum': [1, 2, 3, 4]})\n\t);\n\n\tt.true(error.message.indexOf('scope-enum must be 2 or 3 items long') > -1);\n});\n\ntest('throws for rule with invalid level', async t => {\n\tconst error = await t.throws(\n\t\tlint('type(scope): foo', {\n\t\t\t'type-enum': ['2', 'always'],\n\t\t\t'header-max-length': [{}, 'always']\n\t\t})\n\t);\n\n\tt.true(error.message.indexOf('rule type-enum must be number') > -1);\n\tt.true(error.message.indexOf('rule type-enum must be number') > -1);\n});\n\ntest('throws for rule with out of range level', async t => {\n\tconst error = await t.throws(\n\t\tlint('type(scope): foo', {\n\t\t\t'type-enum': [-1, 'always'],\n\t\t\t'header-max-length': [3, 'always']\n\t\t})\n\t);\n\n\tt.true(error.message.indexOf('rule type-enum must be between 0 and 2') > -1);\n\tt.true(error.message.indexOf('rule type-enum must be between 0 and 2') > -1);\n});\n\ntest('throws for rule with invalid condition', async t => {\n\tconst error = await t.throws(\n\t\tlint('type(scope): foo', {\n\t\t\t'type-enum': [1, 2],\n\t\t\t'header-max-length': [1, {}]\n\t\t})\n\t);\n\n\tt.true(error.message.indexOf('type-enum must be string') > -1);\n\tt.true(error.message.indexOf('header-max-length must be string') > -1);\n});\n\ntest('throws for rule with out of range condition', async t => {\n\tconst error = await t.throws(\n\t\tlint('type(scope): foo', {\n\t\t\t'type-enum': [1, 'foo'],\n\t\t\t'header-max-length': [1, 'bar']\n\t\t})\n\t);\n\n\tt.true(error.message.indexOf('type-enum must be \"always\" or \"never\"') > -1);\n\tt.true(\n\t\terror.message.indexOf('header-max-length must be \"always\" or \"never\"') > -1\n\t);\n});\n\ntest('succeds for issue', async t => {\n\tconst report = await lint('somehting #1', {\n\t\t'references-empty': [2, 'never']\n\t});\n\n\tt.true(report.valid);\n});\n\ntest('fails for issue', async t => {\n\tconst report = await lint('somehting #1', {\n\t\t'references-empty': [2, 'always']\n\t});\n\n\tt.false(report.valid);\n});\n\ntest('succeds for custom issue prefix', async t => {\n\tconst report = await lint(\n\t\t'somehting REF-1',\n\t\t{\n\t\t\t'references-empty': [2, 'never']\n\t\t},\n\t\t{\n\t\t\tparserOpts: {\n\t\t\t\tissuePrefixes: ['REF-']\n\t\t\t}\n\t\t}\n\t);\n\n\tt.true(report.valid);\n});\n\ntest('fails for custom issue prefix', async t => {\n\tconst report = await lint(\n\t\t'somehting #1',\n\t\t{\n\t\t\t'references-empty': [2, 'never']\n\t\t},\n\t\t{\n\t\t\tparserOpts: {\n\t\t\t\tissuePrefixes: ['REF-']\n\t\t\t}\n\t\t}\n\t);\n\n\tt.false(report.valid);\n});\n\ntest('fails for custom plugin rule', async t => {\n\tconst report = await lint(\n\t\t'somehting #1',\n\t\t{\n\t\t\t'plugin-rule': [2, 'never']\n\t\t},\n\t\t{\n\t\t\tplugins: {\n\t\t\t\t'plugin-example': {\n\t\t\t\t\trules: {\n\t\t\t\t\t\t'plugin-rule': () => [false]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t);\n\n\tt.false(report.valid);\n});\n\ntest('passes for custom plugin rule', async t => {\n\tconst report = await lint(\n\t\t'somehting #1',\n\t\t{\n\t\t\t'plugin-rule': [2, 'never']\n\t\t},\n\t\t{\n\t\t\tplugins: {\n\t\t\t\t'plugin-example': {\n\t\t\t\t\trules: {\n\t\t\t\t\t\t'plugin-rule': () => [true]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t);\n\n\tt.true(report.valid);\n});\n\ntest('returns original message only with commit header', async t => {\n\tconst message = 'foo: bar';\n\tconst report = await lint(message);\n\n\tt.is(report.input, message);\n});\n\ntest('returns original message with commit header and body', async t => {\n\tconst message = 'foo: bar/n/nFoo bar bizz buzz.';\n\tconst report = await lint(message);\n\n\tt.is(report.input, message);\n});\n\ntest('returns original message with commit header, body and footer', async t => {\n\tconst message = 'foo: bar/n/nFoo bar bizz buzz./n/nCloses #1';\n\tconst report = await lint(message);\n\n\tt.is(report.input, message);\n});\n\ntest('returns original message with commit header, body and footer, parsing comments', async t => {\n\tconst expected = 'foo: bar/n/nFoo bar bizz buzz./n/nCloses #1';\n\tconst message = `${expected}\\n\\n# Some comment to ignore`;\n\tconst report = await lint(\n\t\tmessage,\n\t\t{\n\t\t\t'references-empty': [2, 'never']\n\t\t},\n\t\t{\n\t\t\tparserOpts: {\n\t\t\t\tcommentChar: '#'\n\t\t\t}\n\t\t}\n\t);\n\n\tt.is(report.input, expected);\n});\n"]}