{"version":3,"sources":["../src/index.js"],"names":["buildCommitMesage","header","body","footer","message","rules","opts","defaults","defaultIgnores","ignores","valid","errors","warnings","input","undefined","parserOpts","parsed","mergedImplementations","Object","assign","plugins","forEach","plugin","keys","ruleKey","missing","filter","name","length","names","RangeError","join","invalid","map","config","Array","isArray","Error","inspect","level","when","isNaN","item","i","results","entry","value","rule","Boolean","result"],"mappings":"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","file":"index.js","sourcesContent":["import util from 'util';\nimport isIgnored from '@commitlint/is-ignored';\nimport parse from '@commitlint/parse';\nimport implementations from '@commitlint/rules';\nimport {toPairs, values} from 'lodash';\n\nconst buildCommitMesage = ({header, body, footer}) => {\n\tlet message = header;\n\n\tmessage = body ? `${message}\\n\\n${body}` : message;\n\tmessage = footer ? `${message}\\n\\n${footer}` : message;\n\n\treturn message;\n};\n\nexport default async (message, rules = {}, opts = {}) => {\n\t// Found a wildcard match, skip\n\tif (\n\t\tisIgnored(message, {defaults: opts.defaultIgnores, ignores: opts.ignores})\n\t) {\n\t\treturn {\n\t\t\tvalid: true,\n\t\t\terrors: [],\n\t\t\twarnings: [],\n\t\t\tinput: message\n\t\t};\n\t}\n\n\t// Parse the commit message\n\tconst parsed = await parse(message, undefined, opts.parserOpts);\n\n\tconst mergedImplementations = Object.assign({}, implementations);\n\tif (opts.plugins) {\n\t\tvalues(opts.plugins).forEach(plugin => {\n\t\t\tif (plugin.rules) {\n\t\t\t\tObject.keys(plugin.rules).forEach(ruleKey => {\n\t\t\t\t\tmergedImplementations[ruleKey] = plugin.rules[ruleKey];\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t// Find invalid rules configs\n\tconst missing = Object.keys(rules).filter(\n\t\tname => typeof mergedImplementations[name] !== 'function'\n\t);\n\n\tif (missing.length > 0) {\n\t\tconst names = Object.keys(mergedImplementations);\n\t\tthrow new RangeError(\n\t\t\t`Found invalid rule names: ${missing.join(\n\t\t\t\t', '\n\t\t\t)}. Supported rule names are: ${names.join(', ')}`\n\t\t);\n\t}\n\n\tconst invalid = toPairs(rules)\n\t\t.map(([name, config]) => {\n\t\t\tif (!Array.isArray(config)) {\n\t\t\t\treturn new Error(\n\t\t\t\t\t`config for rule ${name} must be array, received ${util.inspect(\n\t\t\t\t\t\tconfig\n\t\t\t\t\t)} of type ${typeof config}`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst [level, when] = config;\n\n\t\t\tif (typeof level !== 'number' || isNaN(level)) {\n\t\t\t\treturn new Error(\n\t\t\t\t\t`level for rule ${name} must be number, received ${util.inspect(\n\t\t\t\t\t\tlevel\n\t\t\t\t\t)} of type ${typeof level}`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (level === 0 && config.length === 1) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (config.length !== 2 && config.length !== 3) {\n\t\t\t\treturn new Error(\n\t\t\t\t\t`config for rule ${name} must be 2 or 3 items long, received ${util.inspect(\n\t\t\t\t\t\tconfig\n\t\t\t\t\t)} of length ${config.length}`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (level < 0 || level > 2) {\n\t\t\t\treturn new RangeError(\n\t\t\t\t\t`level for rule ${name} must be between 0 and 2, received ${util.inspect(\n\t\t\t\t\t\tlevel\n\t\t\t\t\t)}`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (typeof when !== 'string') {\n\t\t\t\treturn new Error(\n\t\t\t\t\t`condition for rule ${name} must be string, received ${util.inspect(\n\t\t\t\t\t\twhen\n\t\t\t\t\t)} of type ${typeof when}`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (when !== 'never' && when !== 'always') {\n\t\t\t\treturn new Error(\n\t\t\t\t\t`condition for rule ${name} must be \"always\" or \"never\", received ${util.inspect(\n\t\t\t\t\t\twhen\n\t\t\t\t\t)}`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})\n\t\t.filter(item => item instanceof Error);\n\n\tif (invalid.length > 0) {\n\t\tthrow new Error(invalid.map(i => i.message).join('\\n'));\n\t}\n\n\t// Validate against all rules\n\tconst results = toPairs(rules)\n\t\t.filter(entry => {\n\t\t\tconst [, [level]] = toPairs(entry);\n\t\t\treturn level > 0;\n\t\t})\n\t\t.map(entry => {\n\t\t\tconst [name, config] = entry;\n\t\t\tconst [level, when, value] = config;\n\n\t\t\t// Level 0 rules are ignored\n\t\t\tif (level === 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst rule = mergedImplementations[name];\n\n\t\t\tconst [valid, message] = rule(parsed, when, value);\n\n\t\t\treturn {\n\t\t\t\tlevel,\n\t\t\t\tvalid,\n\t\t\t\tname,\n\t\t\t\tmessage\n\t\t\t};\n\t\t})\n\t\t.filter(Boolean);\n\n\tconst errors = results.filter(result => result.level === 2 && !result.valid);\n\tconst warnings = results.filter(\n\t\tresult => result.level === 1 && !result.valid\n\t);\n\n\tconst valid = errors.length === 0;\n\n\treturn {\n\t\tvalid,\n\t\terrors,\n\t\twarnings,\n\t\tinput: buildCommitMesage(parsed)\n\t};\n};\n"]}