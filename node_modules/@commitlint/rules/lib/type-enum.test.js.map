{"version":3,"sources":["../src/type-enum.test.js"],"names":["messages","empty","a","b","parsed","t","actual","expected","is"],"mappings":"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","file":"type-enum.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport check from './type-enum';\n\nconst messages = {\n\tempty: '(): \\n',\n\ta: 'a(): \\n',\n\tb: 'b(): \\n'\n};\n\nconst parsed = {\n\tempty: parse(messages.empty),\n\ta: parse(messages.a),\n\tb: parse(messages.b)\n};\n\ntest('empty succeeds', async t => {\n\tconst [actual] = check(await parsed.empty);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('empty on \"a\" succeeds', async t => {\n\tconst [actual] = check(await parsed.empty, '', ['a']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('empty on \"always a\" succeeds', async t => {\n\tconst [actual] = check(await parsed.empty, 'always', ['a']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('empty on \"never a\" succeeds', async t => {\n\tconst [actual] = check(await parsed.empty, 'never', ['a']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('empty on \"always a, b\" succeeds', async t => {\n\tconst [actual] = check(await parsed.empty, 'always', ['a', 'b']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('empty on \"never a, b\" succeeds', async t => {\n\tconst [actual] = check(await parsed.empty, 'neber', ['a', 'b']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('a on \"a\" succeeds', async t => {\n\tconst [actual] = check(await parsed.a, '', ['a']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('a on \"always a\" succeeds', async t => {\n\tconst [actual] = check(await parsed.a, 'always', ['a']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('a on \"never a\" fails', async t => {\n\tconst [actual] = check(await parsed.a, 'never', ['a']);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('b on \"b\" succeeds', async t => {\n\tconst [actual] = check(await parsed.b, '', ['b']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('b on \"always b\" succeeds', async t => {\n\tconst [actual] = check(await parsed.b, 'always', ['b']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('b on \"never b\" fails', async t => {\n\tconst [actual] = check(await parsed.b, 'never', ['b']);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('a on \"a, b\" succeeds', async t => {\n\tconst [actual] = check(await parsed.a, '', ['a', 'b']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('a on \"always a, b\" succeeds', async t => {\n\tconst [actual] = check(await parsed.a, 'always', ['a', 'b']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('a on \"never a, b\" fails', async t => {\n\tconst [actual] = check(await parsed.a, 'never', ['a', 'b']);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('b on \"a, b\" succeeds', async t => {\n\tconst [actual] = check(await parsed.b, '', ['a', 'b']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('b on \"always a, b\" succeeds', async t => {\n\tconst [actual] = check(await parsed.b, 'always', ['a', 'b']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('b on \"never a, b\" fails', async t => {\n\tconst [actual] = check(await parsed.b, 'never', ['a', 'b']);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n"]}