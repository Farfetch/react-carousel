{"version":3,"sources":["../src/body-leading-blank.test.js"],"names":["messages","simple","without","with","parsed","t","actual","expected","is"],"mappings":"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","file":"body-leading-blank.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport bodyLeadingBlank from './body-leading-blank';\n\nconst messages = {\n\tsimple: 'test: subject',\n\twithout: 'test: subject\\nbody',\n\twith: 'test: subject\\n\\nbody'\n};\n\nconst parsed = {\n\tsimple: parse(messages.simple),\n\twithout: parse(messages.without),\n\twith: parse(messages.with)\n};\n\ntest('with simple message should succeed for empty keyword', async t => {\n\tconst [actual] = bodyLeadingBlank(await parsed.simple);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with simple message should succeed for \"never\"', async t => {\n\tconst [actual] = bodyLeadingBlank(await parsed.simple, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with simple message should succeed for \"always\"', async t => {\n\tconst [actual] = bodyLeadingBlank(await parsed.simple, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('without blank line before body should fail for empty keyword', async t => {\n\tconst [actual] = bodyLeadingBlank(await parsed.without);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('without blank line before body should succeed for \"never\"', async t => {\n\tconst [actual] = bodyLeadingBlank(await parsed.without, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('without blank line before body should fail for \"always\"', async t => {\n\tconst [actual] = bodyLeadingBlank(await parsed.without, 'always');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with blank line before body should succeed for empty keyword', async t => {\n\tconst [actual] = bodyLeadingBlank(await parsed.with);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with blank line before body should fail for \"never\"', async t => {\n\tconst [actual] = bodyLeadingBlank(await parsed.with, 'never');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with blank line before body should succeed for \"always\"', async t => {\n\tconst [actual] = bodyLeadingBlank(await parsed.with, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n"]}