{"version":3,"sources":["../src/scope-case.js"],"names":["ensure","negated","when","parsed","value","scope","checks","Array","isArray","map","check","case","delimiters","scopeSegments","split","result","some","r","every","segment","test","list","c","join"],"mappings":";;;;;;AAAA;;IAAYA,M;;AACZ;;;;;;;;AAEA,MAAMC,UAAUC,QAAQA,SAAS,OAAjC;;kBAEe,CAACC,MAAD,EAASD,IAAT,EAAeE,KAAf,KAAyB;AAAA,OAChCC,KADgC,GACvBF,MADuB,CAChCE,KADgC;;;AAGvC,KAAI,CAACA,KAAL,EAAY;AACX,SAAO,CAAC,IAAD,CAAP;AACA;;AAED,OAAMC,SAAS,CAACC,MAAMC,OAAN,CAAcJ,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAAhC,EAAyCK,GAAzC,CAA6CC,SAAS;AACpE,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC9B,UAAO;AACNR,UAAM,QADA;AAENS,UAAMD;AAFA,IAAP;AAIA;AACD,SAAOA,KAAP;AACA,EARc,CAAf;;AAUA;AACA;AACA,OAAME,aAAa,UAAnB;AACA,OAAMC,gBAAgBR,MAAMS,KAAN,CAAYF,UAAZ,CAAtB;;AAEA,OAAMG,SAAST,OAAOU,IAAP,CAAYN,SAAS;AACnC,QAAMO,IAAIJ,cAAcK,KAAd,CACTC,WAAWP,WAAWQ,IAAX,CAAgBD,OAAhB,KAA4BnB,OAAOW,IAAP,CAAYQ,OAAZ,EAAqBT,MAAMC,IAA3B,CAD9B,CAAV;;AAIA,SAAOV,QAAQS,MAAMR,IAAd,IAAsB,CAACe,CAAvB,GAA2BA,CAAlC;AACA,EANc,CAAf;;AAQA,OAAMI,OAAOf,OAAOG,GAAP,CAAWa,KAAKA,EAAEX,IAAlB,EAAwBY,IAAxB,CAA6B,IAA7B,CAAb;;AAEA,QAAO,CACNtB,QAAQC,IAAR,IAAgB,CAACa,MAAjB,GAA0BA,MADpB,EAEN,uBAAQ,CAAE,YAAF,EAAed,QAAQC,IAAR,IAAiB,KAAjB,GAAwB,IAAvC,EAA8C,MAAKmB,IAAK,EAAxD,CAAR,CAFM,CAAP;AAIA,C","file":"scope-case.js","sourcesContent":["import * as ensure from '@commitlint/ensure';\nimport message from '@commitlint/message';\n\nconst negated = when => when === 'never';\n\nexport default (parsed, when, value) => {\n\tconst {scope} = parsed;\n\n\tif (!scope) {\n\t\treturn [true];\n\t}\n\n\tconst checks = (Array.isArray(value) ? value : [value]).map(check => {\n\t\tif (typeof check === 'string') {\n\t\t\treturn {\n\t\t\t\twhen: 'always',\n\t\t\t\tcase: check\n\t\t\t};\n\t\t}\n\t\treturn check;\n\t});\n\n\t// Scopes may contain slash-delimiters to separate them and mark them as individual segments.\n\t// This means that each of these segments should be tested separately with `ensure`.\n\tconst delimiters = /(\\/|\\\\)/g;\n\tconst scopeSegments = scope.split(delimiters);\n\n\tconst result = checks.some(check => {\n\t\tconst r = scopeSegments.every(\n\t\t\tsegment => delimiters.test(segment) || ensure.case(segment, check.case)\n\t\t);\n\n\t\treturn negated(check.when) ? !r : r;\n\t});\n\n\tconst list = checks.map(c => c.case).join(', ');\n\n\treturn [\n\t\tnegated(when) ? !result : result,\n\t\tmessage([`scope must`, negated(when) ? `not` : null, `be ${list}`])\n\t];\n};\n"]}