{"version":3,"sources":["../src/header-full-stop.test.js"],"names":["messages","with","without","parsed","t","actual","expected","is"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,WAAW;AAChBC,OAAO,WADS;AAEhBC,UAAU;AAFM,CAAjB;;AAKA,MAAMC,SAAS;AACdF,OAAM,qBAAMD,SAASC,IAAf,CADQ;AAEdC,UAAS,qBAAMF,SAASE,OAAf;AAFK,CAAf;;AAKA,mBAAK,wCAAL,EAAqDE,CAAN;AAAA;;AACvB,wBAAMD,OAAOF,IAAb;AAAA;AAAA,YAAN,8BAAM,QAAN,EAAyB,QAAzB,EAAmC,GAAnC,CAAM;AAAhBI,SAAgB;AACjBC,WADiB,GACN,IADM;;AAEvBF,KAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFuB;AAAA;AAAA;AAAA;AAAA;AADuB,aAA/C;;AAMA,mBAAK,oCAAL,EAAiDF,CAAN;AAAA;;AACnB,wBAAMD,OAAOF,IAAb;AAAA;AAAA,aAAN,8BAAM,QAAN,EAAyB,OAAzB,EAAkC,GAAlC,CAAM;AAAhBI,SAAgB;AACjBC,WADiB,GACN,KADM;;AAEvBF,KAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFuB;AAAA;AAAA;AAAA;AAAA;AADmB,aAA3C;;AAMA,mBAAK,wCAAL,EAAqDF,CAAN;AAAA;;AACvB,wBAAMD,OAAOD,OAAb;AAAA;AAAA,aAAN,8BAAM,QAAN,EAA4B,QAA5B,EAAsC,GAAtC,CAAM;AAAhBG,SAAgB;AACjBC,WADiB,GACN,KADM;;AAEvBF,KAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFuB;AAAA;AAAA;AAAA;AAAA;AADuB,aAA/C;;AAMA,mBAAK,0CAAL,EAAuDF,CAAN;AAAA;;AACzB,wBAAMD,OAAOD,OAAb;AAAA;AAAA,aAAN,8BAAM,QAAN,EAA4B,OAA5B,EAAqC,GAArC,CAAM;AAAhBG,SAAgB;AACjBC,WADiB,GACN,IADM;;AAEvBF,KAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFuB;AAAA;AAAA;AAAA;AAAA;AADyB,aAAjD","file":"header-full-stop.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport check from './header-full-stop';\n\nconst messages = {\n\twith: `header.\\n`,\n\twithout: `header\\n`\n};\n\nconst parsed = {\n\twith: parse(messages.with),\n\twithout: parse(messages.without)\n};\n\ntest('with against \"always .\" should succeed', async t => {\n\tconst [actual] = check(await parsed.with, 'always', '.');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with against \"never .\" should fail', async t => {\n\tconst [actual] = check(await parsed.with, 'never', '.');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('without against \"always .\" should fail', async t => {\n\tconst [actual] = check(await parsed.without, 'always', '.');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('without against \"never .\" should succeed', async t => {\n\tconst [actual] = check(await parsed.without, 'never', '.');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n"]}