{"version":3,"sources":["../src/scope-enum.test.js"],"names":["messages","plain","superfluous","empty","parsed","t","actual","expected","deepEqual"],"mappings":"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","file":"scope-enum.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport scopeEnum from './scope-enum';\n\nconst messages = {\n\tplain: 'foo(bar): baz',\n\tsuperfluous: 'foo(): baz',\n\tempty: 'foo: baz'\n};\n\nconst parsed = {\n\tplain: parse(messages.plain),\n\tsuperfluous: parse(messages.superfluous),\n\tempty: parse(messages.empty)\n};\n\ntest('scope-enum with plain message and always should succeed empty enum', async t => {\n\tconst [actual] = scopeEnum(await parsed.plain, 'always', []);\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n\ntest('scope-enum with plain message and never should error empty enum', async t => {\n\tconst [actual] = scopeEnum(await parsed.plain, 'never', []);\n\tconst expected = false;\n\tt.deepEqual(actual, expected);\n});\n\ntest('with plain message should succeed correct enum', async t => {\n\tconst [actual] = scopeEnum(await parsed.plain, 'always', ['bar']);\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n\ntest('scope-enum with plain message should error false enum', async t => {\n\tconst [actual] = scopeEnum(await parsed.plain, 'always', ['foo']);\n\tconst expected = false;\n\tt.deepEqual(actual, expected);\n});\n\ntest('scope-enum with plain message should error forbidden enum', async t => {\n\tconst [actual] = scopeEnum(await parsed.plain, 'never', ['bar']);\n\tconst expected = false;\n\tt.deepEqual(actual, expected);\n});\n\ntest('scope-enum with plain message should succeed forbidden enum', async t => {\n\tconst [actual] = scopeEnum(await parsed.plain, 'never', ['foo']);\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n\ntest('scope-enum with superfluous scope should succeed enum', async t => {\n\tconst [actual] = scopeEnum(await parsed.superfluous, 'always', ['bar']);\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n\ntest('scope-enum with superfluous scope and \"never\" should succeed', async t => {\n\tconst [actual] = scopeEnum(await parsed.superfluous, 'never', ['bar']);\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n\ntest('scope-enum with superfluous scope and always should succeed empty enum', async t => {\n\tconst [actual] = scopeEnum(await parsed.superfluous, 'always', []);\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n\ntest('scope-enum with superfluous scope and never should succeed empty enum', async t => {\n\tconst [actual] = scopeEnum(await parsed.superfluous, 'never', []);\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n\ntest('scope-enum with empty scope and always should succeed empty enum', async t => {\n\tconst [actual] = scopeEnum(await parsed.superfluous, 'always', []);\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n\ntest('scope-enum with empty scope and always should succeed filled enum', async t => {\n\tconst [actual] = scopeEnum(await parsed.superfluous, 'always', ['foo']);\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n\ntest('scope-enum with empty scope and never should succeed empty enum', async t => {\n\tconst [actual] = scopeEnum(await parsed.superfluous, 'never', []);\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n"]}