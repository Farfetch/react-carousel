{"version":3,"sources":["../src/footer-leading-blank.test.js"],"names":["messages","simple","body","trailing","without","withoutBody","with","withMulitLine","withDoubleNewLine","parsed","t","actual","expected","is"],"mappings":"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","file":"footer-leading-blank.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport footerLeadingBlank from './footer-leading-blank';\n\nconst messages = {\n\tsimple: 'test: subject',\n\tbody: 'test: subject\\nbody',\n\ttrailing: 'test: subject\\nbody\\n\\n',\n\twithout: 'test: subject\\nbody\\nBREAKING CHANGE: something important',\n\twithoutBody:\n\t\t'feat(new-parser): introduces a new parsing library\\n\\nBREAKING CHANGE: new library does not support foo-construct',\n\twith: 'test: subject\\nbody\\n\\nBREAKING CHANGE: something important',\n\twithMulitLine:\n\t\t'test: subject\\nmulti\\nline\\nbody\\n\\nBREAKING CHANGE: something important',\n\twithDoubleNewLine: 'fix: some issue\\n\\ndetailed explanation\\n\\ncloses #123'\n};\n\nconst parsed = {\n\tsimple: parse(messages.simple),\n\tbody: parse(messages.body),\n\ttrailing: parse(messages.trailing),\n\twithout: parse(messages.without),\n\twithoutBody: parse(messages.withoutBody),\n\twith: parse(messages.with),\n\twithMulitLine: parse(messages.withMulitLine),\n\twithDoubleNewLine: parse(messages.withDoubleNewLine)\n};\n\ntest('with simple message should succeed for empty keyword', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.simple);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with simple message should succeed for \"never\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.simple, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with simple message should succeed for \"always\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.simple, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with body message should succeed for empty keyword', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.body);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with body message should succeed for \"never\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.body, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with body message should succeed for \"always\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.body, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with trailing message should succeed for empty keyword', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.trailing);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with trailing message should succeed for \"never\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.trailing, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with trailing message should succeed for \"always\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.trailing, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('without body should fail for \"never\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.withoutBody, 'never');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('without body should succeed for \"always\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.withoutBody, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('without blank line before footer should fail for empty keyword', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.without);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('without blank line before footer should succeed for \"never\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.without, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('without blank line before footer should fail for \"always\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.without, 'always');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with blank line before footer should succeed for empty keyword', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.with);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with blank line before footer should fail for \"never\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.with, 'never');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with blank line before footer should succeed for \"always\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.with, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with blank line before footer and multiline body should succeed for empty keyword', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.withMulitLine);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with blank line before footer and multiline body should fail for \"never\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.withMulitLine, 'never');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with blank line before footer and multiline body should succeed for \"always\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.withMulitLine, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with double blank line before footer and double line in body should fail for \"never\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.withDoubleNewLine, 'never');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with double blank line before footer and double line in body should succeed for \"always\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.withDoubleNewLine, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n"]}