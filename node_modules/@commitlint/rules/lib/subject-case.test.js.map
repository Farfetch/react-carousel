{"version":3,"sources":["../src/subject-case.test.js"],"names":["messages","empty","numeric","lowercase","mixedcase","uppercase","camelcase","kebabcase","pascalcase","snakecase","startcase","parsed","t","actual","expected","is","message","true","indexOf"],"mappings":"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","file":"subject-case.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport subjectCase from './subject-case';\n\nconst messages = {\n\tempty: 'test:\\n',\n\tnumeric: 'test: 1.0.0',\n\tlowercase: 'test: subject',\n\tmixedcase: 'test: sUbJeCt',\n\tuppercase: 'test: SUBJECT',\n\tcamelcase: 'test: subJect',\n\tkebabcase: 'test: sub-ject',\n\tpascalcase: 'test: SubJect',\n\tsnakecase: 'test: sub_ject',\n\tstartcase: 'test: Sub Ject'\n};\n\nconst parsed = {\n\tempty: parse(messages.empty),\n\tnumeric: parse(messages.numeric),\n\tlowercase: parse(messages.lowercase),\n\tmixedcase: parse(messages.mixedcase),\n\tuppercase: parse(messages.uppercase),\n\tcamelcase: parse(messages.camelcase),\n\tkebabcase: parse(messages.kebabcase),\n\tpascalcase: parse(messages.pascalcase),\n\tsnakecase: parse(messages.snakecase),\n\tstartcase: parse(messages.startcase)\n};\n\ntest('with empty subject should succeed for \"never lowercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.empty, 'never', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty subject should succeed for \"always lowercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.empty, 'always', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty subject should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.empty, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty subject should succeed for \"always uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.empty, 'always', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase subject should fail for \"never lowercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.lowercase, 'never', 'lowercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase subject should succeed for \"always lowercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.lowercase, 'always', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase subject should succeed for \"never lowercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.mixedcase, 'never', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase subject should fail for \"always lowercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.mixedcase, 'always', 'lowercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase subject should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.mixedcase, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase subject should fail for \"always uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.mixedcase, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with uppercase subject should fail for \"never uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.uppercase, 'never', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase subject should succeed for \"always uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.uppercase, 'always', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase subject should fail for \"always uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.camelcase, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase subject should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.camelcase, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase subject should fail for \"always pascalcase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.camelcase, 'always', 'pascal-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase subject should fail for \"always kebabcase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.camelcase, 'always', 'kebab-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase subject should fail for \"always snakecase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.camelcase, 'always', 'snake-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase subject should succeed for \"always camelcase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.camelcase, 'always', 'camel-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase subject should fail for \"always uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.pascalcase, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase subject should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.pascalcase, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase subject should succeed for \"always pascalcase\"', async t => {\n\tconst [actual] = subjectCase(\n\t\tawait parsed.pascalcase,\n\t\t'always',\n\t\t'pascal-case'\n\t);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase subject should fail for \"always kebabcase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.pascalcase, 'always', 'kebab-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase subject should fail for \"always snakecase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.pascalcase, 'always', 'snake-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase subject should fail for \"always camelcase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.pascalcase, 'always', 'camel-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase subject should fail for \"always uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.snakecase, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase subject should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.snakecase, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase subject should fail for \"always pascalcase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.snakecase, 'always', 'pascal-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase subject should fail for \"always kebabcase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.snakecase, 'always', 'kebab-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase subject should succeed for \"always snakecase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.snakecase, 'always', 'snake-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase subject should fail for \"always camelcase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.snakecase, 'always', 'camel-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with startcase subject should fail for \"always uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.startcase, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with startcase subject should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.startcase, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with startcase subject should fail for \"always pascalcase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.startcase, 'always', 'pascal-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with startcase subject should fail for \"always kebabcase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.startcase, 'always', 'kebab-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with startcase subject should fail for \"always snakecase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.startcase, 'always', 'snake-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with startcase subject should fail for \"always camelcase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.startcase, 'always', 'camel-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with startcase subject should succeed for \"always startcase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.startcase, 'always', 'start-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('should use expected message with \"always\"', async t => {\n\tconst [, message] = subjectCase(\n\t\tawait parsed.uppercase,\n\t\t'always',\n\t\t'lower-case'\n\t);\n\tt.true(message.indexOf('must be lower-case') > -1);\n});\n\ntest('should use expected message with \"never\"', async t => {\n\tconst [, message] = subjectCase(\n\t\tawait parsed.uppercase,\n\t\t'never',\n\t\t'upper-case'\n\t);\n\tt.true(message.indexOf('must not be upper-case') > -1);\n});\n\ntest('with uppercase scope should succeed for \"always [uppercase, lowercase]\"', async t => {\n\tconst [actual] = subjectCase(await parsed.uppercase, 'always', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase subject should succeed for \"always [uppercase, lowercase]\"', async t => {\n\tconst [actual] = subjectCase(await parsed.lowercase, 'always', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase subject should fail for \"always [uppercase, lowercase]\"', async t => {\n\tconst [actual] = subjectCase(await parsed.mixedcase, 'always', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase subject should pass for \"always [uppercase, lowercase, camel-case]\"', async t => {\n\tconst [actual] = subjectCase(await parsed.mixedcase, 'always', [\n\t\t'uppercase',\n\t\t'lowercase',\n\t\t'camel-case'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase scope should pass for \"never [uppercase, lowercase]\"', async t => {\n\tconst [actual] = subjectCase(await parsed.mixedcase, 'never', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with uppercase scope should fail for \"never [uppercase, lowercase]\"', async t => {\n\tconst [actual] = subjectCase(await parsed.uppercase, 'never', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with numeric subject should succeed for \"never lowercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.numeric, 'never', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with numeric subject should succeed for \"always lowercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.numeric, 'always', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with numeric subject should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.numeric, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with numeric subject should succeed for \"always uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.numeric, 'always', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n"]}