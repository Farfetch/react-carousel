{"version":3,"sources":["../src/type-empty.test.js"],"names":["messages","empty","filled","parsed","t","actual","expected","is"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,WAAW;AAChBC,QAAO,UADS;AAEhBC,SAAQ;AAFQ,CAAjB;;AAKA,MAAMC,SAAS;AACdF,QAAO,qBAAMD,SAASC,KAAf,CADO;AAEdC,SAAQ,qBAAMF,SAASE,MAAf;AAFM,CAAf;;AAKA,mBAAK,+CAAL,EAA4DE,CAAN;AAAA;;AAC1B,wBAAMD,OAAOF,KAAb;AAAA;AAAA,gBAAV,0BAAU,QAAV,CAAU;AAApBI,SAAoB;AACrBC,WADqB,GACV,IADU;;AAE3BF,KAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF2B;AAAA;AAAA;AAAA;AAAA;AAD0B,aAAtD;;AAMA,mBAAK,sCAAL,EAAmDF,CAAN;AAAA;;AACjB,wBAAMD,OAAOF,KAAb;AAAA;AAAA,iBAAV,0BAAU,QAAV,EAA8B,OAA9B,CAAU;AAApBI,SAAoB;AACrBC,WADqB,GACV,KADU;;AAE3BF,KAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF2B;AAAA;AAAA;AAAA;AAAA;AADiB,aAA7C;;AAMA,mBAAK,0CAAL,EAAuDF,CAAN;AAAA;;AACrB,wBAAMD,OAAOF,KAAb;AAAA;AAAA,iBAAV,0BAAU,QAAV,EAA8B,QAA9B,CAAU;AAApBI,SAAoB;AACrBC,WADqB,GACV,IADU;;AAE3BF,KAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF2B;AAAA;AAAA;AAAA;AAAA;AADqB,aAAjD;;AAMA,mBAAK,kCAAL,EAA+CF,CAAN;AAAA;;AACb,wBAAMD,OAAOD,MAAb;AAAA;AAAA,iBAAV,0BAAU,QAAV,CAAU;AAApBG,SAAoB;AACrBC,WADqB,GACV,KADU;;AAE3BF,KAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF2B;AAAA;AAAA;AAAA;AAAA;AADa,aAAzC;;AAMA,mBAAK,+BAAL,EAA4CF,CAAN;AAAA;;AACV,wBAAMD,OAAOD,MAAb;AAAA;AAAA,iBAAV,0BAAU,QAAV,EAA+B,OAA/B,CAAU;AAApBG,SAAoB;AACrBC,WADqB,GACV,IADU;;AAE3BF,KAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF2B;AAAA;AAAA;AAAA;AAAA;AADU,aAAtC;;AAMA,mBAAK,6BAAL,EAA0CF,CAAN;AAAA;;AACR,wBAAMD,OAAOD,MAAb;AAAA;AAAA,kBAAV,0BAAU,QAAV,EAA+B,QAA/B,CAAU;AAApBG,SAAoB;AACrBC,WADqB,GACV,KADU;;AAE3BF,KAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF2B;AAAA;AAAA;AAAA;AAAA;AADQ,aAApC","file":"type-empty.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport typeEmpty from './type-empty';\n\nconst messages = {\n\tempty: '(scope):',\n\tfilled: 'type: subject'\n};\n\nconst parsed = {\n\tempty: parse(messages.empty),\n\tfilled: parse(messages.filled)\n};\n\ntest('without type should succeed for empty keyword', async t => {\n\tconst [actual] = typeEmpty(await parsed.empty);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('without type should fail for \"never\"', async t => {\n\tconst [actual] = typeEmpty(await parsed.empty, 'never');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('without type should succeed for \"always\"', async t => {\n\tconst [actual] = typeEmpty(await parsed.empty, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with type fail for empty keyword', async t => {\n\tconst [actual] = typeEmpty(await parsed.filled);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with type succeed for \"never\"', async t => {\n\tconst [actual] = typeEmpty(await parsed.filled, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with type fail for \"always\"', async t => {\n\tconst [actual] = typeEmpty(await parsed.filled, 'always');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n"]}