{"version":3,"sources":["../src/references-empty.test.js"],"names":["messages","plain","comment","reference","references","prefix","opts","o","parserOpts","commentChar","parsed","undefined","issuePrefixes","t","actual","expected","is"],"mappings":"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","file":"references-empty.test.js","sourcesContent":["import test from 'ava';\nimport preset from 'conventional-changelog-angular';\nimport parse from '@commitlint/parse';\nimport referencesEmpty from './references-empty';\n\nconst messages = {\n\tplain: 'foo: bar',\n\tcomment: 'foo: baz\\n#1 Comment',\n\treference: '#comment\\nfoo: baz \\nCloses #1',\n\treferences: '#comment\\nfoo: bar \\nCloses #1, #2, #3',\n\tprefix: 'bar REF-1234'\n};\n\nconst opts = (async () => {\n\tconst o = await preset;\n\to.parserOpts.commentChar = '#';\n\treturn o;\n})();\n\nconst parsed = {\n\tplain: (async () =>\n\t\tparse(messages.plain, undefined, (await opts).parserOpts))(),\n\tcomment: (async () =>\n\t\tparse(messages.comment, undefined, (await opts).parserOpts))(),\n\treference: (async () =>\n\t\tparse(messages.reference, undefined, (await opts).parserOpts))(),\n\treferences: (async () =>\n\t\tparse(messages.references, undefined, (await opts).parserOpts))(),\n\tprefix: parse(messages.prefix, undefined, {\n\t\tissuePrefixes: ['REF-']\n\t})\n};\n\ntest('defaults to never and fails for plain', async t => {\n\tconst [actual] = referencesEmpty(await parsed.plain);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('defaults to never and succeeds for reference', async t => {\n\tconst [actual] = referencesEmpty(await parsed.reference);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('fails for comment with never', async t => {\n\tconst [actual] = referencesEmpty(await parsed.comment, 'never');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('succeeds for comment with always', async t => {\n\tconst [actual] = referencesEmpty(await parsed.comment, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('succeeds for reference with never', async t => {\n\tconst [actual] = referencesEmpty(await parsed.reference, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('fails for reference with always', async t => {\n\tconst [actual] = referencesEmpty(await parsed.reference, 'always');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('succeeds for references with never', async t => {\n\tconst [actual] = referencesEmpty(await parsed.references, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('fails for references with always', async t => {\n\tconst [actual] = referencesEmpty(await parsed.references, 'always');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('succeeds for custom references with always', async t => {\n\tconst [actual] = referencesEmpty(await parsed.prefix, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n"]}