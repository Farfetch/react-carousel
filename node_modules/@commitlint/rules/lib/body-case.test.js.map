{"version":3,"sources":["../src/body-case.test.js"],"names":["messages","empty","lowercase","mixedcase","uppercase","parsed","t","actual","expected","is"],"mappings":"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","file":"body-case.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport bodyCase from './body-case';\n\nconst messages = {\n\tempty: 'test: subject',\n\tlowercase: 'test: subject\\nbody',\n\tmixedcase: 'test: subject\\nBody',\n\tuppercase: 'test: subject\\nBODY'\n};\n\nconst parsed = {\n\tempty: parse(messages.empty),\n\tlowercase: parse(messages.lowercase),\n\tmixedcase: parse(messages.mixedcase),\n\tuppercase: parse(messages.uppercase)\n};\n\ntest('with empty body should succeed for \"never lowercase\"', async t => {\n\tconst [actual] = bodyCase(await parsed.empty, 'never', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty body should succeed for \"always lowercase\"', async t => {\n\tconst [actual] = bodyCase(await parsed.empty, 'always', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty body should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = bodyCase(await parsed.empty, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty body should succeed for \"always uppercase\"', async t => {\n\tconst [actual] = bodyCase(await parsed.empty, 'always', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase body should fail for \"never lowercase\"', async t => {\n\tconst [actual] = bodyCase(await parsed.lowercase, 'never', 'lowercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase body should succeed for \"always lowercase\"', async t => {\n\tconst [actual] = bodyCase(await parsed.lowercase, 'always', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase body should succeed for \"never lowercase\"', async t => {\n\tconst [actual] = bodyCase(await parsed.mixedcase, 'never', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase body should fail for \"always lowercase\"', async t => {\n\tconst [actual] = bodyCase(await parsed.mixedcase, 'always', 'lowercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase body should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = bodyCase(await parsed.mixedcase, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase body should fail for \"always uppercase\"', async t => {\n\tconst [actual] = bodyCase(await parsed.mixedcase, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with uppercase body should fail for \"never uppercase\"', async t => {\n\tconst [actual] = bodyCase(await parsed.uppercase, 'never', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase body should succeed for \"always uppercase\"', async t => {\n\tconst [actual] = bodyCase(await parsed.uppercase, 'always', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n"]}