{"version":3,"sources":["../src/footer-max-line-length.test.js"],"names":["short","long","value","length","messages","simple","empty","shortMultipleLines","longMultipleLines","parsed","t","actual","expected","is"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,QAAQ,oBAAd;AACA,MAAMC,OAAO,qBAAb;;AAEA,MAAMC,QAAQF,MAAMG,MAApB;;AAEA,MAAMC,WAAW;AAChBC,SAAQ,eADQ;AAEhBC,QAAO,qBAFS;AAGhBN,QAAQ,kBAAiBA,KAAM,EAHf;AAIhBC,OAAO,kBAAiBA,IAAK,EAJb;AAKhBM,qBAAqB,iBAAgBP,KAAM,KAAIA,KAAM,KAAIA,KAAM,EAL/C;AAMhBQ,oBAAoB,iBAAgBR,KAAM,KAAIC,IAAK,KAAID,KAAM;AAN7C,CAAjB;;AASA,MAAMS,SAAS;AACdJ,SAAQ,qBAAMD,SAASC,MAAf,CADM;AAEdC,QAAO,qBAAMF,SAASE,KAAf,CAFO;AAGdN,QAAO,qBAAMI,SAASJ,KAAf,CAHO;AAIdC,OAAM,qBAAMG,SAASH,IAAf;AAJQ,CAAf;;AAOA,mBAAK,4BAAL,EAAyCS,CAAN;AAAA;;AACX,wBAAMD,OAAOJ,MAAb;AAAA;AAAA,YAAN,mCAAM,QAAN,EAA2B,EAA3B,EAA+BH,KAA/B,CAAM;AAAhBS,SAAgB;AACjBC,WADiB,GACN,IADM;;AAEvBF,KAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFuB;AAAA;AAAA;AAAA;AAAA;AADW,aAAnC;;AAMA,mBAAK,2BAAL,EAAwCF,CAAN;AAAA;;AACV,wBAAMD,OAAOH,KAAb;AAAA;AAAA,aAAN,mCAAM,QAAN,EAA0B,EAA1B,EAA8BJ,KAA9B,CAAM;AAAhBS,SAAgB;AACjBC,WADiB,GACN,IADM;;AAEvBF,KAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFuB;AAAA;AAAA;AAAA;AAAA;AADU,aAAlC;;AAMA,mBAAK,2BAAL,EAAwCF,CAAN;AAAA;;AACV,wBAAMD,OAAOT,KAAb;AAAA;AAAA,aAAN,mCAAM,QAAN,EAA0B,EAA1B,EAA8BE,KAA9B,CAAM;AAAhBS,SAAgB;AACjBC,WADiB,GACN,IADM;;AAEvBF,KAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFuB;AAAA;AAAA;AAAA;AAAA;AADU,aAAlC;;AAMA,mBAAK,uBAAL,EAAoCF,CAAN;AAAA;;AACN,wBAAMD,OAAOR,IAAb;AAAA;AAAA,aAAN,mCAAM,QAAN,EAAyB,EAAzB,EAA6BC,KAA7B,CAAM;AAAhBS,SAAgB;AACjBC,WADiB,GACN,KADM;;AAEvBF,KAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFuB;AAAA;AAAA;AAAA;AAAA;AADM,aAA9B;;AAMA,mBAAK,+CAAL,EAA4DF,CAAN;AAAA;;AAC9B,wBAAMD,OAAOT,KAAb;AAAA;AAAA,aAAN,mCAAM,QAAN,EAA0B,EAA1B,EAA8BE,KAA9B,CAAM;AAAhBS,SAAgB;AACjBC,WADiB,GACN,IADM;;AAEvBF,KAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFuB;AAAA;AAAA;AAAA;AAAA;AAD8B,aAAtD;;AAMA,mBAAK,2CAAL,EAAwDF,CAAN;AAAA;;AAC1B,wBAAMD,OAAOR,IAAb;AAAA;AAAA,cAAN,mCAAM,QAAN,EAAyB,EAAzB,EAA6BC,KAA7B,CAAM;AAAhBS,SAAgB;AACjBC,WADiB,GACN,KADM;;AAEvBF,KAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFuB;AAAA;AAAA;AAAA;AAAA;AAD0B,aAAlD","file":"footer-max-line-length.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport check from './footer-max-line-length';\n\nconst short = 'BREAKING CHANGE: a';\nconst long = 'BREAKING CHANGE: ab';\n\nconst value = short.length;\n\nconst messages = {\n\tsimple: 'test: subject',\n\tempty: 'test: subject\\nbody',\n\tshort: `test: subject\\n${short}`,\n\tlong: `test: subject\\n${long}`,\n\tshortMultipleLines: `test:subject\\n${short}\\n${short}\\n${short}`,\n\tlongMultipleLines: `test:subject\\n${short}\\n${long}\\n${short}`\n};\n\nconst parsed = {\n\tsimple: parse(messages.simple),\n\tempty: parse(messages.empty),\n\tshort: parse(messages.short),\n\tlong: parse(messages.long)\n};\n\ntest('with simple should succeed', async t => {\n\tconst [actual] = check(await parsed.simple, '', value);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty should succeed', async t => {\n\tconst [actual] = check(await parsed.empty, '', value);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with short should succeed', async t => {\n\tconst [actual] = check(await parsed.short, '', value);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with long should fail', async t => {\n\tconst [actual] = check(await parsed.long, '', value);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with short with multiple lines should succeed', async t => {\n\tconst [actual] = check(await parsed.short, '', value);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with long with multiple lines should fail', async t => {\n\tconst [actual] = check(await parsed.long, '', value);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n"]}