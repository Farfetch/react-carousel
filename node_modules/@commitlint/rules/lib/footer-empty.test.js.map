{"version":3,"sources":["../src/footer-empty.test.js"],"names":["messages","simple","empty","filled","parsed","t","actual","expected","is"],"mappings":"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","file":"footer-empty.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport footerEmpty from './footer-empty';\n\nconst messages = {\n\tsimple: 'test: subject',\n\tempty: 'test: subject\\nbody',\n\tfilled: 'test: subject\\nBREAKING CHANGE: something important'\n};\n\nconst parsed = {\n\tsimple: parse(messages.simple),\n\tempty: parse(messages.empty),\n\tfilled: parse(messages.filled)\n};\n\ntest('with simple message should succeed for empty keyword', async t => {\n\tconst [actual] = footerEmpty(await parsed.simple);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with simple message should fail for \"never\"', async t => {\n\tconst [actual] = footerEmpty(await parsed.simple, 'never');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with simple message should succeed for \"always\"', async t => {\n\tconst [actual] = footerEmpty(await parsed.simple, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty footer should succeed for empty keyword', async t => {\n\tconst [actual] = footerEmpty(await parsed.empty);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty footer should fail for \"never\"', async t => {\n\tconst [actual] = footerEmpty(await parsed.empty, 'never');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with empty footer should succeed for \"always\"', async t => {\n\tconst [actual] = footerEmpty(await parsed.empty, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with footer should fail for empty keyword', async t => {\n\tconst [actual] = footerEmpty(await parsed.filled);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with footer should succeed for \"never\"', async t => {\n\tconst [actual] = footerEmpty(await parsed.filled, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with footer should fail for \"always\"', async t => {\n\tconst [actual] = footerEmpty(await parsed.filled, 'always');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n"]}