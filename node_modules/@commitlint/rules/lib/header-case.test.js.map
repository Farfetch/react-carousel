{"version":3,"sources":["../src/header-case.test.js"],"names":["messages","numeric","lowercase","mixedcase","uppercase","camelcase","kebabcase","pascalcase","snakecase","startcase","parsed","t","actual","expected","is","message","true","indexOf"],"mappings":"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","file":"header-case.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport headerCase from './header-case';\n\nconst messages = {\n\tnumeric: '1.0.0\\n',\n\tlowercase: 'header\\n',\n\tmixedcase: 'hEaDeR\\n',\n\tuppercase: 'HEADER\\n',\n\tcamelcase: 'heaDer\\n',\n\tkebabcase: 'hea-der\\n',\n\tpascalcase: 'HeaDer\\n',\n\tsnakecase: 'hea_der\\n',\n\tstartcase: 'Hea Der\\n'\n};\n\nconst parsed = {\n\tnumeric: parse(messages.numeric),\n\tlowercase: parse(messages.lowercase),\n\tmixedcase: parse(messages.mixedcase),\n\tuppercase: parse(messages.uppercase),\n\tcamelcase: parse(messages.camelcase),\n\tkebabcase: parse(messages.kebabcase),\n\tpascalcase: parse(messages.pascalcase),\n\tsnakecase: parse(messages.snakecase),\n\tstartcase: parse(messages.startcase)\n};\n\ntest('with lowercase header should fail for \"never lowercase\"', async t => {\n\tconst [actual] = headerCase(await parsed.lowercase, 'never', 'lowercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase header should succeed for \"always lowercase\"', async t => {\n\tconst [actual] = headerCase(await parsed.lowercase, 'always', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase header should succeed for \"never lowercase\"', async t => {\n\tconst [actual] = headerCase(await parsed.mixedcase, 'never', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase header should fail for \"always lowercase\"', async t => {\n\tconst [actual] = headerCase(await parsed.mixedcase, 'always', 'lowercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase header should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = headerCase(await parsed.mixedcase, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase header should fail for \"always uppercase\"', async t => {\n\tconst [actual] = headerCase(await parsed.mixedcase, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with uppercase header should fail for \"never uppercase\"', async t => {\n\tconst [actual] = headerCase(await parsed.uppercase, 'never', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase header should succeed for \"always uppercase\"', async t => {\n\tconst [actual] = headerCase(await parsed.uppercase, 'always', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase header should fail for \"always uppercase\"', async t => {\n\tconst [actual] = headerCase(await parsed.camelcase, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase header should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = headerCase(await parsed.camelcase, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase header should fail for \"always pascalcase\"', async t => {\n\tconst [actual] = headerCase(await parsed.camelcase, 'always', 'pascal-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase header should fail for \"always kebabcase\"', async t => {\n\tconst [actual] = headerCase(await parsed.camelcase, 'always', 'kebab-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase header should fail for \"always snakecase\"', async t => {\n\tconst [actual] = headerCase(await parsed.camelcase, 'always', 'snake-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase header should succeed for \"always camelcase\"', async t => {\n\tconst [actual] = headerCase(await parsed.camelcase, 'always', 'camel-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase header should fail for \"always uppercase\"', async t => {\n\tconst [actual] = headerCase(await parsed.pascalcase, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase header should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = headerCase(await parsed.pascalcase, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase header should succeed for \"always pascalcase\"', async t => {\n\tconst [actual] = headerCase(await parsed.pascalcase, 'always', 'pascal-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase header should fail for \"always kebabcase\"', async t => {\n\tconst [actual] = headerCase(await parsed.pascalcase, 'always', 'kebab-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase header should fail for \"always snakecase\"', async t => {\n\tconst [actual] = headerCase(await parsed.pascalcase, 'always', 'snake-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase header should fail for \"always camelcase\"', async t => {\n\tconst [actual] = headerCase(await parsed.pascalcase, 'always', 'camel-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase header should fail for \"always uppercase\"', async t => {\n\tconst [actual] = headerCase(await parsed.snakecase, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase header should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = headerCase(await parsed.snakecase, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase header should fail for \"always pascalcase\"', async t => {\n\tconst [actual] = headerCase(await parsed.snakecase, 'always', 'pascal-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase header should fail for \"always kebabcase\"', async t => {\n\tconst [actual] = headerCase(await parsed.snakecase, 'always', 'kebab-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase header should succeed for \"always snakecase\"', async t => {\n\tconst [actual] = headerCase(await parsed.snakecase, 'always', 'snake-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase header should fail for \"always camelcase\"', async t => {\n\tconst [actual] = headerCase(await parsed.snakecase, 'always', 'camel-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with startcase header should fail for \"always uppercase\"', async t => {\n\tconst [actual] = headerCase(await parsed.startcase, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with startcase header should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = headerCase(await parsed.startcase, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with startcase header should fail for \"always pascalcase\"', async t => {\n\tconst [actual] = headerCase(await parsed.startcase, 'always', 'pascal-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with startcase header should fail for \"always kebabcase\"', async t => {\n\tconst [actual] = headerCase(await parsed.startcase, 'always', 'kebab-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with startcase header should fail for \"always snakecase\"', async t => {\n\tconst [actual] = headerCase(await parsed.startcase, 'always', 'snake-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with startcase header should fail for \"always camelcase\"', async t => {\n\tconst [actual] = headerCase(await parsed.startcase, 'always', 'camel-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with startcase header should succeed for \"always startcase\"', async t => {\n\tconst [actual] = headerCase(await parsed.startcase, 'always', 'start-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('should use expected message with \"always\"', async t => {\n\tconst [, message] = headerCase(\n\t\tawait parsed.uppercase,\n\t\t'always',\n\t\t'lower-case'\n\t);\n\tt.true(message.indexOf('must be lower-case') > -1);\n});\n\ntest('should use expected message with \"never\"', async t => {\n\tconst [, message] = headerCase(await parsed.uppercase, 'never', 'upper-case');\n\tt.true(message.indexOf('must not be upper-case') > -1);\n});\n\ntest('with uppercase scope should succeed for \"always [uppercase, lowercase]\"', async t => {\n\tconst [actual] = headerCase(await parsed.uppercase, 'always', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase header should succeed for \"always [uppercase, lowercase]\"', async t => {\n\tconst [actual] = headerCase(await parsed.lowercase, 'always', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase header should fail for \"always [uppercase, lowercase]\"', async t => {\n\tconst [actual] = headerCase(await parsed.mixedcase, 'always', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase header should pass for \"always [uppercase, lowercase, camel-case]\"', async t => {\n\tconst [actual] = headerCase(await parsed.mixedcase, 'always', [\n\t\t'uppercase',\n\t\t'lowercase',\n\t\t'camel-case'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase scope should pass for \"never [uppercase, lowercase]\"', async t => {\n\tconst [actual] = headerCase(await parsed.mixedcase, 'never', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with uppercase scope should fail for \"never [uppercase, lowercase]\"', async t => {\n\tconst [actual] = headerCase(await parsed.uppercase, 'never', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with numeric header should succeed for \"never lowercase\"', async t => {\n\tconst [actual] = headerCase(await parsed.numeric, 'never', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with numeric header should succeed for \"always lowercase\"', async t => {\n\tconst [actual] = headerCase(await parsed.numeric, 'always', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with numeric header should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = headerCase(await parsed.numeric, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with numeric header should succeed for \"always uppercase\"', async t => {\n\tconst [actual] = headerCase(await parsed.numeric, 'always', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n"]}