{"version":3,"sources":["../src/scope-empty.test.js"],"names":["messages","plain","superfluous","empty","parsed","t","actual","expected","deepEqual"],"mappings":"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","file":"scope-empty.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport scopeEmpty from './scope-empty';\n\nconst messages = {\n\tplain: 'foo(bar): baz',\n\tsuperfluous: 'foo(): baz',\n\tempty: 'foo: baz'\n};\n\nconst parsed = {\n\tplain: parse(messages.plain),\n\tsuperfluous: parse(messages.superfluous),\n\tempty: parse(messages.empty)\n};\n\ntest('with plain message it should succeed for empty keyword', async t => {\n\tconst [actual] = scopeEmpty(await parsed.plain);\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n\ntest('with plain message it should succeed for \"never\"', async t => {\n\tconst [actual] = scopeEmpty(await parsed.plain, 'never');\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n\ntest('with plain message it should fail for \"always\"', async t => {\n\tconst [actual] = scopeEmpty(await parsed.plain, 'always');\n\tconst expected = false;\n\tt.deepEqual(actual, expected);\n});\n\ntest('with superfluous message it should fail for empty keyword', async t => {\n\tconst [actual] = scopeEmpty(await parsed.superfluous);\n\tconst expected = false;\n\tt.deepEqual(actual, expected);\n});\n\ntest('with superfluous message it should fail for \"never\"', async t => {\n\tconst [actual] = scopeEmpty(await parsed.superfluous, 'never');\n\tconst expected = false;\n\tt.deepEqual(actual, expected);\n});\n\ntest('with superfluous message it should fail for \"always\"', async t => {\n\tconst [actual] = scopeEmpty(await parsed.superfluous, 'always');\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n\ntest('with empty message it should fail for empty keyword', async t => {\n\tconst [actual] = scopeEmpty(await parsed.empty);\n\tconst expected = false;\n\tt.deepEqual(actual, expected);\n});\n\ntest('with empty message it should fail for \"never\"', async t => {\n\tconst [actual] = scopeEmpty(await parsed.empty, 'never');\n\tconst expected = false;\n\tt.deepEqual(actual, expected);\n});\n\ntest('with empty message it should fail for \"always\"', async t => {\n\tconst [actual] = scopeEmpty(await parsed.empty, 'always');\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n"]}