{"version":3,"sources":["../src/subject-full-stop.test.js"],"names":["messages","empty","with","without","parsed","t","actual","expected","is"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,WAAW;AAChBC,QAAO,SADS;AAEhBC,OAAO,kBAFS;AAGhBC,UAAU;AAHM,CAAjB;;AAMA,MAAMC,SAAS;AACdH,QAAO,qBAAMD,SAASC,KAAf,CADO;AAEdC,OAAM,qBAAMF,SAASE,IAAf,CAFQ;AAGdC,UAAS,qBAAMH,SAASG,OAAf;AAHK,CAAf;;AAMA,mBAAK,uCAAL,EAAoDE,CAAN;AAAA;;AACtB,wBAAMD,OAAOH,KAAb;AAAA;AAAA,YAAN,+BAAM,QAAN,EAA0B,QAA1B,EAAoC,GAApC,CAAM;AAAhBK,SAAgB;AACjBC,WADiB,GACN,IADM;;AAEvBF,KAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFuB;AAAA;AAAA;AAAA;AAAA;AADsB,aAA9C;;AAMA,mBAAK,wCAAL,EAAqDF,CAAN;AAAA;;AACvB,wBAAMD,OAAOH,KAAb;AAAA;AAAA,aAAN,+BAAM,QAAN,EAA0B,OAA1B,EAAmC,GAAnC,CAAM;AAAhBK,SAAgB;AACjBC,WADiB,GACN,IADM;;AAEvBF,KAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFuB;AAAA;AAAA;AAAA;AAAA;AADuB,aAA/C;;AAMA,mBAAK,wCAAL,EAAqDF,CAAN;AAAA;;AACvB,wBAAMD,OAAOF,IAAb;AAAA;AAAA,aAAN,+BAAM,QAAN,EAAyB,QAAzB,EAAmC,GAAnC,CAAM;AAAhBI,SAAgB;AACjBC,WADiB,GACN,IADM;;AAEvBF,KAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFuB;AAAA;AAAA;AAAA;AAAA;AADuB,aAA/C;;AAMA,mBAAK,oCAAL,EAAiDF,CAAN;AAAA;;AACnB,wBAAMD,OAAOF,IAAb;AAAA;AAAA,aAAN,+BAAM,QAAN,EAAyB,OAAzB,EAAkC,GAAlC,CAAM;AAAhBI,SAAgB;AACjBC,WADiB,GACN,KADM;;AAEvBF,KAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFuB;AAAA;AAAA;AAAA;AAAA;AADmB,aAA3C;;AAMA,mBAAK,wCAAL,EAAqDF,CAAN;AAAA;;AACvB,wBAAMD,OAAOD,OAAb;AAAA;AAAA,aAAN,+BAAM,QAAN,EAA4B,QAA5B,EAAsC,GAAtC,CAAM;AAAhBG,SAAgB;AACjBC,WADiB,GACN,KADM;;AAEvBF,KAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFuB;AAAA;AAAA;AAAA;AAAA;AADuB,aAA/C;;AAMA,mBAAK,0CAAL,EAAuDF,CAAN;AAAA;;AACzB,wBAAMD,OAAOD,OAAb;AAAA;AAAA,cAAN,+BAAM,QAAN,EAA4B,OAA5B,EAAqC,GAArC,CAAM;AAAhBG,SAAgB;AACjBC,WADiB,GACN,IADM;;AAEvBF,KAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFuB;AAAA;AAAA;AAAA;AAAA;AADyB,aAAjD","file":"subject-full-stop.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport check from './subject-full-stop';\n\nconst messages = {\n\tempty: 'test:\\n',\n\twith: `test: subject.\\n`,\n\twithout: `test: subject\\n`\n};\n\nconst parsed = {\n\tempty: parse(messages.empty),\n\twith: parse(messages.with),\n\twithout: parse(messages.without)\n};\n\ntest('empty against \"always\" should succeed', async t => {\n\tconst [actual] = check(await parsed.empty, 'always', '.');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('empty against \"never .\" should succeed', async t => {\n\tconst [actual] = check(await parsed.empty, 'never', '.');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with against \"always .\" should succeed', async t => {\n\tconst [actual] = check(await parsed.with, 'always', '.');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with against \"never .\" should fail', async t => {\n\tconst [actual] = check(await parsed.with, 'never', '.');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('without against \"always .\" should fail', async t => {\n\tconst [actual] = check(await parsed.without, 'always', '.');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('without against \"never .\" should succeed', async t => {\n\tconst [actual] = check(await parsed.without, 'never', '.');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n"]}