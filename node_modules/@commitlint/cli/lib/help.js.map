{"version":3,"sources":["../src/help.js"],"names":["module","exports","flags","lines","Object","entries","map","entry","name","value","alias","filter","Boolean","description","default","longest","line","reduce","sum","flag","length","sort","a","b","desc","defaults","fs","ds","join","repeat","Math","max"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiBC,SAAS;AACzB,OAAMC,QAAQC,OAAOC,OAAP,CAAeH,KAAf,EAAsBI,GAAtB,CAA0BC,SAAS;AAChD,QAAMC,OAAOD,MAAM,CAAN,CAAb;AACA,QAAME,QAAQF,MAAM,CAAN,CAAd;AACA,SAAO,CACN,CAACC,IAAD,EAAOC,MAAMC,KAAb,EAAoBC,MAApB,CAA2BC,OAA3B,CADM,EAENH,MAAMI,WAFA,EAGNJ,MAAMK,OAHA,EAILH,MAJK,CAIEC,OAJF,CAAP;AAKA,EARa,CAAd;;AAUA,OAAMG,UAAUZ,MACdG,GADc,CACVU,QAAQ;AACZ,QAAMd,QAAQc,KAAK,CAAL,CAAd;AACA,SAAOd,MAAMe,MAAN,CAAa,CAACC,GAAD,EAAMC,IAAN,KAAeD,MAAMC,KAAKC,MAAvC,EAA+C,CAA/C,CAAP;AACA,EAJc,EAKdC,IALc,CAKT,CAACC,CAAD,EAAIC,CAAJ,KAAUA,IAAID,CALL,EAKQ,CALR,CAAhB;;AAOA,QAAOnB,MACLG,GADK,CACDU,QAAQ;AACZ,QAAMd,QAAQc,KAAK,CAAL,CAAd;AACA,QAAMQ,OAAOR,KAAK,CAAL,CAAb;AACA,QAAMS,WAAWT,KAAK,CAAL,CAAjB;AACA,QAAMU,KAAKxB,MAAMI,GAAN,CAAUa,QACpBA,KAAKC,MAAL,GAAc,CAAd,GAAmB,KAAID,IAAK,EAA5B,GAAiC,KAAIA,IAAK,EADhC,CAAX;AAGA,QAAMQ,KAAKF,WAAY,kBAAiBA,QAAS,EAAtC,GAA0C,EAArD;AACA,QAAML,SAASlB,MAAMe,MAAN,CAAa,CAACC,GAAD,EAAMC,IAAN,KAAeD,MAAMC,KAAKC,MAAvC,EAA+C,CAA/C,CAAf;AACA,SAAQ,GAAEM,GAAGE,IAAH,CAAQ,GAAR,CAAa,GAAE,IAAIC,MAAJ,CACxBC,KAAKC,GAAL,CAAS,IAAIhB,OAAJ,GAAcK,MAAvB,EAA+B,CAA/B,CADwB,CAEvB,GAAEI,IAAK,GAAEG,EAAG,EAFd;AAGA,EAbK,EAcLC,IAdK,CAcA,IAdA,CAAP;AAeA,CAjCD","file":"help.js","sourcesContent":["module.exports = flags => {\n\tconst lines = Object.entries(flags).map(entry => {\n\t\tconst name = entry[0];\n\t\tconst value = entry[1];\n\t\treturn [\n\t\t\t[name, value.alias].filter(Boolean),\n\t\t\tvalue.description,\n\t\t\tvalue.default\n\t\t].filter(Boolean);\n\t});\n\n\tconst longest = lines\n\t\t.map(line => {\n\t\t\tconst flags = line[0];\n\t\t\treturn flags.reduce((sum, flag) => sum + flag.length, 0);\n\t\t})\n\t\t.sort((a, b) => b - a)[0];\n\n\treturn lines\n\t\t.map(line => {\n\t\t\tconst flags = line[0];\n\t\t\tconst desc = line[1];\n\t\t\tconst defaults = line[2];\n\t\t\tconst fs = flags.map(flag =>\n\t\t\t\tflag.length > 1 ? `--${flag}` : ` -${flag}`\n\t\t\t);\n\t\t\tconst ds = defaults ? `, defaults to: ${defaults}` : '';\n\t\t\tconst length = flags.reduce((sum, flag) => sum + flag.length, 0);\n\t\t\treturn `${fs.join(',')}${' '.repeat(\n\t\t\t\tMath.max(4 + longest - length, 0)\n\t\t\t)}${desc}${ds}`;\n\t\t})\n\t\t.join('\\n');\n};\n"]}