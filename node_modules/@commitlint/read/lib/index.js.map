{"version":3,"sources":["../src/index.js"],"names":["sander","getCommitMessages","settings","cwd","from","to","edit","getEditCommit","getHistoryCommits","options","opts","Promise","resolve","reject","data","on","chunk","push","toString","top","TypeError","getEditFilePath","editFilePath","readFile","editFile","dotgitPath","join","dotgitStats","lstatSync","isDirectory","encoding","gitFile","relativeGitPath","replace"],"mappings":"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","file":"index.js","sourcesContent":["import path from 'path';\nimport gitRawCommits from 'git-raw-commits';\nimport * as sander from '@marionebl/sander';\n\nimport toplevel from '@commitlint/top-level';\n\nexport default getCommitMessages;\n\n// Get commit messages\n// Object => Promise<Array<String>>\nasync function getCommitMessages(settings) {\n\tconst {cwd, from, to, edit} = settings;\n\n\tif (edit) {\n\t\treturn getEditCommit(cwd, edit);\n\t}\n\n\treturn getHistoryCommits({from, to}, {cwd});\n}\n\n// Get commit messages from history\n// Object => Promise<string[]>\nfunction getHistoryCommits(options, opts = {}) {\n\treturn new Promise((resolve, reject) => {\n\t\tconst data = [];\n\t\tgitRawCommits(options, {cwd: opts.cwd})\n\t\t\t.on('data', chunk => data.push(chunk.toString('utf-8')))\n\t\t\t.on('error', reject)\n\t\t\t.on('end', () => {\n\t\t\t\tresolve(data);\n\t\t\t});\n\t});\n}\n\n// Get recently edited commit message\n// (cwd: string, edit: any) => Promise<Array<String>>\nasync function getEditCommit(cwd, edit) {\n\tconst top = await toplevel(cwd);\n\n\tif (typeof top !== 'string') {\n\t\tthrow new TypeError(`Could not find git root from ${cwd}`);\n\t}\n\n\tconst editFilePath = await getEditFilePath(top, edit);\n\n\tconst editFile = await sander.readFile(editFilePath);\n\treturn [`${editFile.toString('utf-8')}\\n`];\n}\n\n// Get path to recently edited commit message file\n// (top: string, edit: any) => Promise<String>\nasync function getEditFilePath(top, edit) {\n\tlet editFilePath;\n\tif (typeof edit === 'string') {\n\t\teditFilePath = path.resolve(top, edit);\n\t} else {\n\t\tconst dotgitPath = path.join(top, '.git');\n\t\tconst dotgitStats = sander.lstatSync(dotgitPath);\n\t\tif (dotgitStats.isDirectory()) {\n\t\t\teditFilePath = path.join(top, '.git/COMMIT_EDITMSG');\n\t\t} else {\n\t\t\tconst gitFile = await sander.readFile(dotgitPath, {encoding: 'utf-8'});\n\t\t\tconst relativeGitPath = gitFile.replace('gitdir: ', '').replace('\\n', '');\n\t\t\teditFilePath = path.resolve(top, relativeGitPath, 'COMMIT_EDITMSG');\n\t\t}\n\t}\n\n\treturn editFilePath;\n}\n"]}