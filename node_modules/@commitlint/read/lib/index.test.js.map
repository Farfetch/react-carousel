{"version":3,"sources":["../src/index.test.js"],"names":["sander","t","bootstrap","cwd","writeFile","expected","edit","actual","deepEqual","mkdir"],"mappings":"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","file":"index.test.js","sourcesContent":["import {git} from '@commitlint/test';\nimport test from 'ava';\nimport execa from 'execa';\nimport * as sander from '@marionebl/sander';\n\nimport read from '.';\n\ntest('get edit commit message specified by the `edit` flag', async t => {\n\tconst cwd = await git.bootstrap();\n\n\tawait sander.writeFile(cwd, 'commit-msg-file', 'foo');\n\n\tconst expected = ['foo\\n'];\n\tconst actual = await read({edit: 'commit-msg-file', cwd});\n\tt.deepEqual(actual, expected);\n});\n\ntest('get edit commit message from git root', async t => {\n\tconst cwd = await git.bootstrap();\n\n\tawait sander.writeFile(cwd, 'alpha.txt', 'alpha');\n\tawait execa('git', ['add', '.'], {cwd});\n\tawait execa('git', ['commit', '-m', 'alpha'], {cwd});\n\tconst expected = ['alpha\\n\\n'];\n\tconst actual = await read({edit: true, cwd});\n\tt.deepEqual(actual, expected);\n});\n\ntest('get history commit messages', async t => {\n\tconst cwd = await git.bootstrap();\n\tawait sander.writeFile(cwd, 'alpha.txt', 'alpha');\n\tawait execa('git', ['add', 'alpha.txt'], {cwd});\n\tawait execa('git', ['commit', '-m', 'alpha'], {cwd});\n\tawait execa('git', ['rm', 'alpha.txt'], {cwd});\n\tawait execa('git', ['commit', '-m', 'remove alpha'], {cwd});\n\n\tconst expected = ['remove alpha\\n\\n', 'alpha\\n\\n'];\n\tconst actual = await read({cwd});\n\tt.deepEqual(actual, expected);\n});\n\ntest('get edit commit message from git subdirectory', async t => {\n\tconst cwd = await git.bootstrap();\n\tawait sander.mkdir(cwd, 'beta');\n\tawait sander.writeFile(cwd, 'beta/beta.txt', 'beta');\n\n\tawait execa('git', ['add', '.'], {cwd});\n\tawait execa('git', ['commit', '-m', 'beta'], {cwd});\n\n\tconst expected = ['beta\\n\\n'];\n\tconst actual = await read({edit: true, cwd});\n\tt.deepEqual(actual, expected);\n});\n"]}